
Virk0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803e00  00803e00  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000029ae  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001bd6  00000000  00000000  00002d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a75  00000000  00000000  000048f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000019c  00000000  00000000  0000536c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001164  00000000  00000000  00005508  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017a  00000000  00000000  0000666c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  000067e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	43 c0       	rjmp	.+134    	; 0x8e <__vector_3>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__vector_6>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_clear_bss>:
  40:	2e e3       	ldi	r18, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a0 30       	cpi	r26, 0x00	; 0
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	3a d0       	rcall	.+116    	; 0xc6 <main>
  52:	93 c0       	rjmp	.+294    	; 0x17a <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
	system_init();
  56:	75 d0       	rcall	.+234    	; 0x142 <system_init>
  58:	08 95       	ret

0000005a <__vector_6>:
#include <driver_init.h>
#include <compiler.h>
#include <avr/sleep.h>

ISR(RTC_CNT_vect)							//RTC interrupt routine. Executed every 64000/32kHz = 2 sec
{
  5a:	1f 92       	push	r1
  5c:	0f 92       	push	r0
  5e:	0f b6       	in	r0, 0x3f	; 63
  60:	0f 92       	push	r0
  62:	11 24       	eor	r1, r1
  64:	8f 93       	push	r24
  66:	ef 93       	push	r30
  68:	ff 93       	push	r31
	sleep_disable();						//Disables sleep mode
  6a:	e0 e5       	ldi	r30, 0x50	; 80
  6c:	f0 e0       	ldi	r31, 0x00	; 0
  6e:	80 81       	ld	r24, Z
  70:	8e 7f       	andi	r24, 0xFE	; 254
  72:	80 83       	st	Z, r24
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTB_toggle_pin_level(const uint8_t pin)
{
	PORTB.OUTTGL = 1 << pin;
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <__TEXT_REGION_LENGTH__+0x700427>
	LED1_toggle_level();					//Toggles LED1
	
	RTC.INTFLAGS = RTC_OVF_bm;				//Turns off the interrupt flag so that the ISR can be called again.
  7a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
}
  7e:	ff 91       	pop	r31
  80:	ef 91       	pop	r30
  82:	8f 91       	pop	r24
  84:	0f 90       	pop	r0
  86:	0f be       	out	0x3f, r0	; 63
  88:	0f 90       	pop	r0
  8a:	1f 90       	pop	r1
  8c:	18 95       	reti

0000008e <__vector_3>:

ISR(PORTA_PORT_vect)			//PORTA interrupt routine. Executed when impact on any PORTA.
{
  8e:	1f 92       	push	r1
  90:	0f 92       	push	r0
  92:	0f b6       	in	r0, 0x3f	; 63
  94:	0f 92       	push	r0
  96:	11 24       	eor	r1, r1
  98:	8f 93       	push	r24
  9a:	ef 93       	push	r30
  9c:	ff 93       	push	r31
	if (!(PORTA.IN & 1<<5))		//Checks the status of Button 1. It should be high, but this ISR gets activated by any PORTA interrupt.
  9e:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
  a2:	85 fd       	sbrc	r24, 5
  a4:	05 c0       	rjmp	.+10     	; 0xb0 <__vector_3+0x22>
	{
		sleep_disable();		//Disables sleep mode
  a6:	e0 e5       	ldi	r30, 0x50	; 80
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8e 7f       	andi	r24, 0xFE	; 254
  ae:	80 83       	st	Z, r24
	}
	
	PORTA.INTFLAGS = PORT_INT5_bm;			//Turns off the interrupt flag so that the ISR can be called again.
  b0:	80 e2       	ldi	r24, 0x20	; 32
  b2:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
}
  b6:	ff 91       	pop	r31
  b8:	ef 91       	pop	r30
  ba:	8f 91       	pop	r24
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <main>:
#include <util/delay.h>

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  c6:	c7 df       	rcall	.-114    	; 0x56 <atmel_start_init>
	set_sleep_mode(SLEEP_MODE_STANDBY);
  c8:	e0 e5       	ldi	r30, 0x50	; 80
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	89 7f       	andi	r24, 0xF9	; 249
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	24 e5       	ldi	r18, 0x54	; 84
  d6:	88 e5       	ldi	r24, 0x58	; 88
  d8:	94 e1       	ldi	r25, 0x14	; 20
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x14>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x1e>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x20>
	

	/* Replace with your application code */
	while (1) {
		_delay_ms(2000);
		sleep_enable();
  e6:	80 81       	ld	r24, Z
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	80 83       	st	Z, r24
		sleep_mode();
  ec:	80 81       	ld	r24, Z
  ee:	81 60       	ori	r24, 0x01	; 1
  f0:	80 83       	st	Z, r24
  f2:	88 95       	sleep
  f4:	80 81       	ld	r24, Z
  f6:	8e 7f       	andi	r24, 0xFE	; 254
  f8:	80 83       	st	Z, r24
  fa:	ec cf       	rjmp	.-40     	; 0xd4 <main+0xe>

000000fc <BOD_init>:
	//		 | BOD_VLMCFG_ABOVE_gc; /* Interrupt when supply goes above VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	08 95       	ret

00000100 <CLKCTRL_init>:
	//while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm) {
	//}
//

	return 0;
}
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	08 95       	ret

00000104 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
 104:	78 94       	sei

	return 0;
}
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	08 95       	ret

0000010a <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
 10a:	e0 e1       	ldi	r30, 0x10	; 16
 10c:	f4 e0       	ldi	r31, 0x04	; 4
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 10e:	80 81       	ld	r24, Z
 110:	88 60       	ori	r24, 0x08	; 8
 112:	81 93       	st	Z+, r24
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 114:	e8 31       	cpi	r30, 0x18	; 24
 116:	84 e0       	ldi	r24, 0x04	; 4
 118:	f8 07       	cpc	r31, r24
 11a:	c9 f7       	brne	.-14     	; 0x10e <mcu_init+0x4>
 11c:	e0 e3       	ldi	r30, 0x30	; 48
 11e:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 120:	80 81       	ld	r24, Z
 122:	88 60       	ori	r24, 0x08	; 8
 124:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 126:	e8 33       	cpi	r30, 0x38	; 56
 128:	84 e0       	ldi	r24, 0x04	; 4
 12a:	f8 07       	cpc	r31, r24
 12c:	c9 f7       	brne	.-14     	; 0x120 <mcu_init+0x16>
 12e:	e0 e5       	ldi	r30, 0x50	; 80
 130:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 132:	80 81       	ld	r24, Z
 134:	88 60       	ori	r24, 0x08	; 8
 136:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 138:	e8 35       	cpi	r30, 0x58	; 88
 13a:	84 e0       	ldi	r24, 0x04	; 4
 13c:	f8 07       	cpc	r31, r24
 13e:	c9 f7       	brne	.-14     	; 0x132 <mcu_init+0x28>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 140:	08 95       	ret

00000142 <system_init>:
#include "driver_init.h"
#include <system.h>

void system_init()
{
	mcu_init();
 142:	e3 df       	rcall	.-58     	; 0x10a <mcu_init>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 144:	20 9a       	sbi	0x04, 0	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 146:	28 98       	cbi	0x05, 0	; 5
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	CLKCTRL_init();
 148:	db df       	rcall	.-74     	; 0x100 <CLKCTRL_init>

	RTC_0_init();
 14a:	04 d0       	rcall	.+8      	; 0x154 <RTC_0_init>

	CPUINT_init();
 14c:	db df       	rcall	.-74     	; 0x104 <CPUINT_init>

	SLPCTRL_init();
 14e:	10 d0       	rcall	.+32     	; 0x170 <SLPCTRL_init>

	BOD_init();
 150:	d5 df       	rcall	.-86     	; 0xfc <BOD_init>
 152:	08 95       	ret

00000154 <RTC_0_init>:
 * \brief Initialize RTC interface
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
 154:	e0 e4       	ldi	r30, 0x40	; 64
 156:	f1 e0       	ldi	r31, 0x01	; 1
 158:	81 81       	ldd	r24, Z+1	; 0x01
 15a:	81 11       	cpse	r24, r1
 15c:	fd cf       	rjmp	.-6      	; 0x158 <RTC_0_init+0x4>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV1_gc   /* 1 */
 15e:	e0 e4       	ldi	r30, 0x40	; 64
 160:	f1 e0       	ldi	r31, 0x01	; 1
 162:	81 e8       	ldi	r24, 0x81	; 129
 164:	80 83       	st	Z, r24
	            | 1 << RTC_RTCEN_bp     /* Enable: enabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	//RTC.PER = 0xffff; /* Period: 0xffff */

	RTC.CLKSEL = RTC_CLKSEL_INT32K_gc; /* 32KHz Internal Ultra Low Power Oscillator (OSCULP32K) */
 166:	17 82       	std	Z+7, r1	; 0x07

	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.INTCTRL = 0 << RTC_CMP_bp    /* Compare Match Interrupt enable: disabled */
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	82 83       	std	Z+2, r24	; 0x02
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	08 95       	ret

00000170 <SLPCTRL_init>:
 * \brief Initialize slpctrl interface
 */
int8_t SLPCTRL_init()
{

	SLPCTRL.CTRLA = 1 << SLPCTRL_SEN_bp       /* Sleep enable: enabled */
 170:	83 e0       	ldi	r24, 0x03	; 3
 172:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	                | SLPCTRL_SMODE_STDBY_gc; /* Standby Mode */

	return 0;
}
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	08 95       	ret

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
